---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro

import "@pagefind/default-ui/css/ui.css";
import { Icon } from "astro-icon/components";
---

<site-search class="ms-auto" id="search">
  <button
    class="flex h-8 w-8 items-center justify-center rounded-lg drop-shadow-[0px_1.5px_1.5px_rgba(0,0,0,0.175)] hover:text-accent-two"
    data-open-modal
    disabled
  >
    <Icon
      aria-hidden="true"
      class="h-6 w-6"
      focusable="false"
      name="hugeicons:search-01"
    />
  </button>

  <dialog
    aria-label="search"
    class="h-fit max-h-[90vh] w-full max-w-full md:h-fit bg-[var(--color-surface)] backdrop:backdrop-blur-xl md:my-8 md:min-h-[6.5rem] md:w-5/6 md:max-w-[44rem] md:rounded-lg md:mx-auto overflow-y-auto"
  >
    <div
      class="dialog-frame flex flex-col px-4 pt-4 pb-4 md:px-8 md:py-8 gap-4"
    >
      <!-- Header and close button -->
      <div
        class="md:hidden sticky top-0 z-20 flex items-center justify-between bg-[var(--color-surface)]"
      >
        <h4 class="title flex items-end font-semibold">Search</h4>
        <button
          class="flex size-8 cursor-pointer items-center justify-center rounded-lg bg-color-100 text-[var(--color-foreground)] hover:text-accent-base hover:bg-accent-base/5"
          data-close-modal
        >
          <Icon
            aria-hidden="true"
            class="h-6 w-6"
            focusable="false"
            name="hugeicons:cancel-01"
          />
        </button>
      </div>

      <!-- Content -->
      <div class="search-container h-full">
        <div id="citrus__search"></div>
      </div>
    </div>
  </dialog>
</site-search>

<script>
  // Mock PagefindUI for development mode
  class MockPagefindUI {
    private element: HTMLElement;
    private options: any;
    private searchInput: HTMLInputElement | null = null;

    constructor(options: any) {
      this.options = options;
      this.element = document.querySelector(options.element)!;
      this.init();
    }

    private init() {
      this.element.innerHTML = `
        <div class="pagefind-ui">
          <form class="pagefind-ui__form">
            <input
              class="pagefind-ui__search-input text-red-500"
              type="search"
              placeholder="Search..."
              autocomplete="off"
            />
            <button class="pagefind-ui__search-clear" type="button" style="display: none;">
              Clear
            </button>
          </form>
          <div class="pagefind-ui__drawer">
            <div class="pagefind-ui__results-area">
              <p class="pagefind-ui__message">
                <strong>Dev Mode:</strong> Mock search results (functional for UI testing)
              </p>
              <div class="pagefind-ui__results" id="mock-results" style="display: none;">
                ${this.getMockResults()}
              </div>
            </div>
          </div>
        </div>
      `;

      this.searchInput = this.element.querySelector(
        ".pagefind-ui__search-input",
      );
      const clearButton = this.element.querySelector(
        ".pagefind-ui__search-clear",
      ) as HTMLButtonElement;
      const resultsContainer = this.element.querySelector(
        "#mock-results",
      ) as HTMLElement;
      const messageContainer = this.element.querySelector(
        ".pagefind-ui__message",
      ) as HTMLElement;

      // Add search functionality
      this.searchInput?.addEventListener("input", (e) => {
        const value = (e.target as HTMLInputElement).value;

        if (value.length > 0) {
          clearButton.style.display = "block";
          resultsContainer.style.display = "block";
          messageContainer.style.display = "none";

          // Filter results based on search term
          this.updateResults(value);
        } else {
          clearButton.style.display = "none";
          resultsContainer.style.display = "none";
          messageContainer.style.display = "block";
        }
      });

      // Add clear functionality
      clearButton?.addEventListener("click", () => {
        if (this.searchInput) {
          this.searchInput.value = "";
          this.searchInput.dispatchEvent(new Event("input"));
          this.searchInput.focus();
        }
      });
    }

    private getMockResults() {
      const mockData = [
        {
          title: "Getting Started Guide",
          excerpt:
            "Learn how to get started with this project. This guide covers installation, configuration, and your first steps.",
          keywords: [
            "getting",
            "started",
            "guide",
            "installation",
            "configuration",
          ],
        },
        {
          title: "API Documentation",
          excerpt:
            "Comprehensive API reference documentation. Includes examples, parameters, and response formats for all endpoints.",
          keywords: [
            "api",
            "documentation",
            "reference",
            "endpoints",
            "examples",
          ],
        },
        {
          title: "Configuration Options",
          excerpt:
            "Detailed guide on how to configure your application. Covers environment variables, settings, and configuration files.",
          keywords: [
            "configuration",
            "options",
            "environment",
            "variables",
            "settings",
          ],
          nested: [
            {
              title: "Environment Variables",
              excerpt:
                "How to set up and use environment variables in your configuration.",
              keywords: ["environment", "variables", "configuration"],
            },
          ],
        },
        {
          title: "Troubleshooting",
          excerpt:
            "Common issues and their solutions. Find answers to frequently asked questions and troubleshooting tips.",
          keywords: [
            "troubleshooting",
            "issues",
            "solutions",
            "faq",
            "problems",
          ],
        },
        {
          title: "Advanced Features",
          excerpt:
            "Explore advanced features and capabilities. Learn about plugins, extensions, and power-user techniques.",
          keywords: [
            "advanced",
            "features",
            "plugins",
            "extensions",
            "techniques",
          ],
        },
      ];

      return mockData
        .map(
          (item) => `
        <div class="pagefind-ui__result" data-keywords="${item.keywords.join(" ")}">
          <div class="pagefind-ui__result-inner">
            <a class="pagefind-ui__result-link" href="#" onclick="event.preventDefault(); return false;" style="pointer-events: none; opacity: 0.7;">
              ${item.title}
            </a>
            <p class="pagefind-ui__result-excerpt">
              ${item.excerpt}
            </p>
          </div>
          ${
            item.nested
              ? item.nested
                  .map(
                    (nested) => `
            <div class="pagefind-ui__result-nested">
              <div class="pagefind-ui__result-inner">
                <a class="pagefind-ui__result-link" href="#" onclick="event.preventDefault(); return false;" style="pointer-events: none; opacity: 0.7;">
                  ${nested.title}
                </a>
                <p class="pagefind-ui__result-excerpt">
                  ${nested.excerpt}
                </p>
              </div>
            </div>
          `,
                  )
                  .join("")
              : ""
          }
        </div>
      `,
        )
        .join("");
    }

    private updateResults(searchTerm: string) {
      const results = this.element.querySelectorAll(".pagefind-ui__result");
      const term = searchTerm.toLowerCase();

      results.forEach((result) => {
        const keywords = (result as HTMLElement).dataset.keywords || "";
        const title =
          result.querySelector(".pagefind-ui__result-link")?.textContent || "";
        const excerpt =
          result.querySelector(".pagefind-ui__result-excerpt")?.textContent ||
          "";

        const matches =
          keywords.toLowerCase().includes(term) ||
          title.toLowerCase().includes(term) ||
          excerpt.toLowerCase().includes(term);

        if (matches) {
          (result as HTMLElement).style.display = "block";

          // Highlight search terms
          const link = result.querySelector(".pagefind-ui__result-link");
          const excerptEl = result.querySelector(
            ".pagefind-ui__result-excerpt",
          );

          if (link) {
            link.innerHTML = this.highlightTerm(link.textContent || "", term);
          }
          if (excerptEl) {
            excerptEl.innerHTML = this.highlightTerm(
              excerptEl.textContent || "",
              term,
            );
          }
        } else {
          (result as HTMLElement).style.display = "none";
        }
      });
    }

    private highlightTerm(text: string, term: string): string {
      if (!term) return text;
      const regex = new RegExp(`(${term})`, "gi");
      return text.replace(regex, "<mark>$1</mark>");
    }
  }

  class SiteSearch extends HTMLElement {
    private closeBtn: HTMLButtonElement;
    private dialog: HTMLDialogElement;
    private dialogFrame: HTMLDivElement;
    private openBtn: HTMLButtonElement;

    closeModal = () => {
      if (this.dialog.open) {
        this.dialog.close();
        document.body.classList.remove("overflow-hidden");
        window.removeEventListener("click", this.onWindowClick);
      }
    };

    onWindowClick = (event: MouseEvent) => {
      // Check if it's a link
      const isLink = "href" in (event.target || {});
      // Make sure the click is either a link or outside of the dialog
      if (
        isLink ||
        (document.body.contains(event.target as Node) &&
          !this.dialogFrame.contains(event.target as Node))
      )
        this.closeModal();
    };

    onWindowKeydown = (e: KeyboardEvent) => {
      // Check if it's the / key
      if (e.key === "/" && !this.dialog.open) {
        this.openModal();
        e.preventDefault();
      }
    };

    openModal = (event?: MouseEvent) => {
      this.dialog.showModal();
      document.body.classList.add("overflow-hidden");
      this.querySelector("input")?.focus();
      event?.stopPropagation();
      window.addEventListener("click", this.onWindowClick);
    };

    constructor() {
      super();
      this.openBtn = this.querySelector<HTMLButtonElement>(
        "button[data-open-modal]",
      )!;
      this.closeBtn = this.querySelector<HTMLButtonElement>(
        "button[data-close-modal]",
      )!;
      this.dialog = this.querySelector("dialog")!;
      this.dialogFrame = this.querySelector(".dialog-frame")!;

      this.openBtn.addEventListener("click", this.openModal);
      this.openBtn.disabled = false;
      this.closeBtn.addEventListener("click", this.closeModal);
    }

    connectedCallback() {
      // Listen for keyboard shortcut
      window.addEventListener("keydown", this.onWindowKeydown);

      const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));

      if (import.meta.env.DEV) {
        // Use mock PagefindUI in development
        onIdle(async () => {
          new MockPagefindUI({
            element: "#citrus__search",
            showImages: false,
            showSubResults: true,
          });
        });
      } else {
        // Use real PagefindUI in production
        onIdle(async () => {
          const { PagefindUI } = await import("@pagefind/default-ui");
          new PagefindUI({
            baseUrl: import.meta.env.BASE_URL,
            bundlePath:
              import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
            element: "#citrus__search",
            showImages: false,
            showSubResults: true,
          });
        });
      }
    }

    disconnectedCallback() {
      window.removeEventListener("keydown", this.onWindowKeydown);
    }
  }

  customElements.define("site-search", SiteSearch);
</script>

<style is:global>
  @reference "../styles/global.css";

  /* ===== PAGEFIND UI CUSTOMIZATION ===== */
  /* These styles override the default PagefindUI styles */
  /* Changes here will affect both dev (MockPagefindUI) and production modes */

  :root {
    --pagefind-ui-border-radius: 0.5rem; /* 8px */
  }

  /* Main container theming */
  #citrus__search {
    --pagefind-ui-primary: var(--color-accent-two);
    --pagefind-ui-text: var(--color-foreground);
    --pagefind-ui-background: var(--color-surface);
    --pagefind-ui-border: var(--color-color-400);
    @apply h-full;
  }

  /* Base component layout */
  #citrus__search .pagefind-ui {
    @apply w-full h-full font-sans;
    color: var(--color-foreground);
  }

  /* Utility classes */
  #citrus__search .pagefind-ui__hidden {
    @apply hidden;
  }

  #citrus__search .pagefind-ui__suppressed {
    @apply opacity-0 pointer-events-none;
  }

  /* Search form styling */
  #citrus__search .pagefind-ui__form {
    @apply relative w-full mb-4;
  }

  #citrus__search .pagefind-ui__form::before {
    @apply absolute pointer-events-none block opacity-70 z-10 size-4 top-3 left-3;
    content: "";
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg width='18' height='18' viewBox='0 0 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z' fill='%23000000'/%3E%3C/svg%3E%0A");
    mask-image: url("data:image/svg+xml,%3Csvg width='18' height='18' viewBox='0 0 18 18' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z' fill='%23000000'/%3E%3C/svg%3E%0A");
    -webkit-mask-size: 100%;
    mask-size: 100%;
  }

  /* Search input styling */
  #citrus__search .pagefind-ui__search-input {
    @apply bg-color-100 rounded-lg border-none text-base font-normal w-full flex h-10 py-0 px-10 outline-none;
    color: var(--color-foreground);
  }

  #citrus__search .pagefind-ui__search-input::placeholder {
    @apply opacity-60;
  }

  /* Clear button styling */
  #citrus__search .pagefind-ui__search-clear {
    @apply overflow-hidden absolute top-0 right-0 size-10 py-0 px-0 font-medium cursor-pointer bg-transparent rounded-lg;
    color: var(--color-foreground);
  }

  #citrus__search .pagefind-ui__search-clear::before {
    @apply bg-accent-two block w-full h-full;
    content: "";
    -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' %3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 18L18 6M6 6l12 12'%3E%3C/path%3E%3C/svg%3E")
      center / 60% no-repeat;
    mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' %3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 18L18 6M6 6l12 12'%3E%3C/path%3E%3C/svg%3E")
      center / 60% no-repeat;
  }

  /* Results container layout */
  #citrus__search .pagefind-ui__drawer {
    @apply flex flex-col w-full pb-0;
  }

  #citrus__search .pagefind-ui__results-area {
    @apply flex-1 mt-0 mb-0;
  }

  #citrus__search .pagefind-ui__results {
    @apply p-0 text-base;
    color: var(--color-foreground);
  }

  /* Message styling */
  #citrus__search .pagefind-ui__message {
    @apply text-base font-normal text-lighter h-10 py-0 flex items-center border-none;
  }

  /* Button styling */
  #citrus__search .pagefind-ui__button {
    @apply absolute bottom-0 m-0 shadow-md border-none flex items-center justify-center rounded-lg h-10 py-0 px-2 text-base text-center font-medium cursor-pointer bg-accent-base;
    color: var(--color-surface);
  }

  #citrus__search .pagefind-ui__button:hover {
    @apply brightness-110;
  }

  /* Individual result styling */
  #citrus__search .pagefind-ui__result {
    @apply border-none p-0 mb-8;
  }

  #citrus__search .pagefind-ui__result:last-of-type {
    @apply mb-0;
  }

  #citrus__search .pagefind-ui__result-inner {
    @apply flex-1 flex flex-col items-start mt-0;
  }

  #citrus__search .pagefind-ui__result-link {
    @apply font-semibold text-base bg-transparent text-accent-base;
  }

  #citrus__search .pagefind-ui__result-excerpt {
    @apply inline-block font-normal text-base mt-0 mb-0 md:line-clamp-1 mr-2;
    color: var(--color-foreground);
  }

  /* Nested results styling */
  #citrus__search .pagefind-ui__result-nested {
    @apply ps-4;
  }

  #citrus__search .pagefind-ui__result-nested:first-of-type {
    @apply pt-0;
  }

  /* Search term highlighting */
  #citrus__search mark {
    @apply text-accent-two bg-transparent;
  }

  /* ===== HOVER STATES TO BE IMPROVED ===== */
  #citrus__search .pagefind-ui__search-clear:focus {
    /* Add focus styles here */
  }

  #citrus__search .pagefind-ui__result-link:hover {
    /* Add hover styles here */
  }
</style>
